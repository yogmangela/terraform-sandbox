# -- The name of the agent environment, only overwrite in cases where e.g. name lengths
# are causing failures.
# @default -- set by inspect
global:
  nameOverride: ""
  fullnameOverride: ""
# -- A list of fully qualified domain names that pods within the agent environment are
# allowed to access.
# @default -- Empty list (no internet access)
allowDomains: []
# - "pypi.org"
# - "files.pythonhosted.org"
# -- A list of CIDR ranges (e.g. 1.1.1.1/32) that pods within the agent environment are
# allowed to access.
# @default -- Empty list (no additional CIDR ranges compared to default policies)
allowCIDR: []
# -- A list of Cilium entities (e.g. "world") that pods within the agent environment are
# allowed to access.
# @default -- Empty list (no additional entities compared to default policies)
allowEntities: []
# -- References to pre-existing secrets that contain registry credentials.
imagePullSecrets: []
# - name: "gcr-json-key"
# -- Defines network names that can be attached to services in order to specify subsets
# of services that can communicate with one another.
networks: {}
# -- A collection of services to deploy within the agent environment. A service can
# connect to another service using DNS, e.g. `http://nginx:80`.
# @default -- see [values.yaml](./values.yaml)
services:
  # -- The default service, this is required for the agent environment to function.
  # @default -- see [values.yaml](./values.yaml)
  default:
    # -- The container runtime e.g. gvisor or runc. The default is gvisor if not
    # specified or set to `null`.
    runtimeClassName: gvisor
    # -- The container's image name.
    image: "python:3.12-bookworm"
    # -- The container's entrypoint command.
    command: ["tail", "-f", "/dev/null"]
    # -- The container's entrypoint arguments.
    args: []
    # -- The container's working directory.
    workingDir: null
    # -- Whether to create a DNS record which will resolve to this service from within
    # the agent environment, using the service name as the domain (e.g. default).
    # @default -- false
    dnsRecord: false
    # -- A list of additional domains which will resolve to this service from within the
    # agent environment (e.g. example.com). If one or more records are provided,
    # `dnsRecord` is automatically set to true.
    additionalDnsRecords: []
    # -- Deprecated. All ports of services with a DNS record are accessible (though not
    # necessarily open) to other services within the agent environment. If one or more
    # ports are provided, `dnsRecord` is automatically set to true.
    ports: []
    # -- Environment variables that will be set in the container.
    env: []
    # -- Volumes accessible to the container. Supports arbitrary yaml or colon-separated
    # strings of the form `volume-name:/mount-path`.
    volumes: []
    # -- Volume mounts that will be mounted in the container. Volumes defined in
    # `volumes:` as colon-separated strings will automatically be mounted at their
    # specified mount paths.
    volumeMounts: []
    # -- Resource requests and limits for the container.
    # @default -- see [templates/services.yaml](./templates/services.yaml)
    resources: {}
    # -- A probe which is used to determine when the container is ready to accept.
    # traffic.
    readinessProbe: {}
    # -- A probe which is used to determine when to restart a container.
    livenessProbe: {}
    # -- The container's image pull policy.
    imagePullPolicy: null
    # -- Privilege and access control settings for the container.
    securityContext: {}
    # -- Toleration settings for the Pod.
    tolerations: []
    # -- Node selector settings for the Pod.
    nodeSelector: {}
  # nginx:
  #   runtimeClassName: gvisor
  #   image: "nginx"
  #   dnsRecord: true
  #   additionalDnsRecords:
  #     - "nginx.com"
  #     - "my-fake-domain.org"
  #   env:
  #   - name: "SOME_ENV_VAR"
  #     value: "some-value"
  #   resources:
  #     requests:
  #       memory: "64Mi"
  #       cpu: "250m"
  #     limits:
  #       memory: "128Mi"
  #       cpu: "500m"
  #   readinessProbe:
  #     tcpSocket:
  #       port: 80
  #     initialDelaySeconds: 5
  #     periodSeconds: 5
  #   livenessProbe:
  #     tcpSocket:
  #       port: 80
  #     initialDelaySeconds: 5
  #     periodSeconds: 5
  #   volumeMounts:
  #   - mountPath: /mypath
  #     name: custom-volume
  #   volumes:
  #   - name: custom-volume
  #     emptyDir: {}
  #   - "shared-volume:/mount-path"
  #   securityContext:
  #     allowPrivilegeEscalation: false
# -- A dict of volumes to deploy within the agent environment as NFS-CSI
# PersistentVolumeClaims. These volumes can be mounted in services using the `volumes:`
# field. The actual volume name will include the release name.
volumes: {}
#   shared-volume:
# -- A list of additional resources to deploy within the agent environment. They're
# passed through the Helm template engine. String values are passed through the
# template engine then converted to YAML.
additionalResources: []
# -- A dict of annotations to apply to resources within the agent environment.
annotations: {}
  # inspectTaskName: "task-name"
